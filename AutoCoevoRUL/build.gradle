plugins {
	id 'java'
	id 'eclipse-wtp'
}

repositories {
    mavenCentral()
	mavenLocal()
	maven { url "https://jitpack.io" }
	maven { url "http://clojars.org/repo/" }
	maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {

    implementation('com.github.starlibs:ailibs:mlplan-sklearn~bugfix-searchspace-and-factory-SNAPSHOT'){
    	exclude group: 'mysql', module: 'mysql-connector-java'
    	}
    implementation('com.github.mwever:moeaframework:e6f6b1a007')
    
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.25'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.30'
    
    
	implementation "com.github.fommil.netlib:all:1.1.2"
    

	//Testing
    testImplementation 'org.junit.platform:junit-platform-runner:1.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    
	testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'

}

sourceSets {
	main {
		java {
			srcDir 'src/main/java'
        }
        resources {
			srcDir 'src/main/resources'
			srcDir 'conf'
		}
	}
    test {
		java {
			srcDir 'src/test/java'
		}
		resources {
			srcDir 'src/test/resources'
		}
	}
}

sourceCompatibility = 1.11
targetCompatibility = 1.11


task buildCoevolution(type: Jar) {
    manifest {
 		attributes 'Main-Class': 'autocoevorul.experiment.AutoCoevolutionRunner'
    }
    zip64 = true
    baseName = 'Coevolution'
    from { 
    	configurations.compile.collect { 
    		it.isDirectory() ? it : zipTree(it) 
    	}
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}
task buildRandomSearch(type: Jar) {
    manifest {
 		attributes 'Main-Class': 'autocoevorul.experiment.RandomSearchRunner'
    }
    zip64 = true
    baseName = 'RandomSearch'
    from { 
    	configurations.compile.collect { 
    		it.isDirectory() ? it : zipTree(it) 
    	}
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}
task buildMlPlan(type: Jar) {
    manifest {
 		attributes 'Main-Class': 'autocoevorul.experiment.MLPlanRunner'
    }
    zip64 = true
    baseName = 'MLPlan'
    from { 
    	configurations.compile.collect { 
    		it.isDirectory() ? it : zipTree(it) 
    	}
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}
task generateResultsTable(type: JavaExec) {
  classpath sourceSets.main.runtimeClasspath
  main = "autocoevorul.experiment.results.ResultsTable"
}
